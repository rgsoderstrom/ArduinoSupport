
//
// MessageCodeGenerator.cs - 
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

namespace MessageGenerator
{
    internal partial class MessageCodeGenerator
    {
        const string SyncPattern = "0x1234";

        // typedefs
        public delegate void VariableTypeToFromBytes      (string inp, List<string> reults);
        public delegate void VariableTypeArrayToFromBytes (string inp, string count, List<string> reults);

        static void Main (string [] args)
        {
            // put generated files here
            string dir = @"C:\Users\rgsod\Documents\Visual Studio 2022\Projects\ArduinoSupport\MessageGenerator\AutoGeneratedFiles\";

            //
            // Describe the message
            //
            string messageNameSpace = "ArduinoInterface"; // only used for C# files
            string messageName = "LoopbackDataMsg_Auto";

            //
            // Data section, with strings in C++ syntax
            //

            // Constants
            List<string> Constants = new List<string> ()
            {
                //"char abc = 7",
                //"char def = 'q'",
                //"int CCC = 5",
                //"int N = 3",
                "unsigned int WordCount = 32",
                //"double NN = 7.65"
            };

            // Variables
            List<string> Variables = new List<string> ()
            {
                //"char aaa",
                //"short ppp = 7;",
                //"unsigned char bbbb [CCC];",
                "int LBData [WordCount];",
                //"int ddd;",
                //"float dddd [N];"
            };

            // what to make this run
            bool MakeCppFiles = false;
            bool MakeCsFile = true;

            //*****************************************************************

            // parse 

            List<string []> variablesAsTokens = new List<string[]> ();
            List<string []> constantsAsTokens = new List<string[]> ();

            try
            {
                variablesAsTokens = ParseVariables (Variables);
                constantsAsTokens = ParseConstants (Constants);
            }

            catch (Exception ex)
            {
                Console.WriteLine ("Exception parsing: " + ex.Message);
            }

            // debug flag to write tokens to console
            bool verbose = false;

            if (verbose)
            {
                // constants
                Console.WriteLine ("Constants:");
                foreach (string [] strArray in constantsAsTokens)
                {
                    foreach (string str in strArray)
                        Console.Write (str + ", ");
                    Console.WriteLine ();
                }

                // variables
                Console.WriteLine ("\nVariables:");
                foreach (string [] strArray2 in variablesAsTokens)
                {
                    foreach (string str in strArray2)
                        Console.Write (str + ", ");
                    Console.WriteLine ();
                }
            }

            //******************************************************************

            if (MakeCppFiles == true)
            {
                string cppFile = dir + messageName + ".cpp";
                string hFile = dir + messageName + ".h";

                MakeCppCodeFile    (cppFile, messageName, variablesAsTokens);
                MakeCppIncludeFile (hFile,   messageName, constantsAsTokens, variablesAsTokens);
            }

            if (MakeCsFile == true)
            {
                string csFile = @dir + messageName + ".cs";

                MakeCsCodeFile    (csFile, messageNameSpace, messageName, variablesAsTokens);

            }
        }

        //*********************************************************************************
        //*********************************************************************************
        //*********************************************************************************

        //
        // Methods to write C++ file
        //
        static void CppBeginCodeFile (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("//");
            sw.WriteLine ("// auto-generated code for message " + msgName);
            sw.WriteLine ("//");
            sw.WriteLine ("");
            sw.WriteLine ("#include <Arduino.h>");
            sw.WriteLine ("#include \"" + msgName + ".h\"");
        }

        static void CppDefaultConstructor (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("");
            sw.WriteLine ("// Default constructor");
            sw.WriteLine (msgName + "::" + msgName + " ()");
            sw.WriteLine ("{");
            sw.WriteLine ("    memset (this, 0, sizeof (" + msgName + "));");
            sw.WriteLine ("");
            sw.WriteLine ("    header.Sync           = " + SyncPattern + ";");
            sw.WriteLine ("    header.ByteCount      = sizeof (header) + sizeof (data);");
            sw.WriteLine ("    header.MsgId          = " + msgName + "ID;");
            sw.WriteLine ("    header.SequenceNumber = NextSequenceNumber++;");
            sw.WriteLine ("}");
        }

        //
        // Methods to write C# file
        //
        static void CsOpenNamespace (StreamWriter sw, string namespaceName, string msgName)
        {
            sw.WriteLine ("//");
            sw.WriteLine ("// auto-generated code for message " + msgName);
            sw.WriteLine ("//");
            sw.WriteLine ("");
            sw.WriteLine ("using System;");
            sw.WriteLine ("using System.Text;");
            sw.WriteLine ("using System.Collections.Generic;");
            sw.WriteLine ("using SocketLib;");
            sw.WriteLine ("");

            sw.WriteLine ("namespace " + namespaceName);
            sw.WriteLine ("{");
        }

        static void CsCloseNamespace (StreamWriter sw)
        {
            sw.WriteLine ("}");
        }

        static void CsOpenClass (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("    public partial class " + msgName);
            sw.WriteLine ("    {");
        }

        static void CsCloseClass (StreamWriter sw)
        {
            sw.WriteLine ("    }");
        }

        static void CsOpenConstructor (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("        public " + msgName + " (byte [] fromBytes)");
            sw.WriteLine ("        {");
            sw.WriteLine ("            header = new Header ();");
            sw.WriteLine ("            data = new Data ();");
            sw.WriteLine ("            int byteIndex = 0;");
            sw.WriteLine ("");
            sw.WriteLine ("            header.Sync           = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
            sw.WriteLine ("            header.ByteCount      = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
            sw.WriteLine ("            header.MessageId      = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
            sw.WriteLine ("            header.SequenceNumber = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
        }

        static void CsCloseConstructor (StreamWriter sw)
        {
            sw.WriteLine ("        }");
        }

        static void CsOpenToBytesMethod (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("");
            sw.WriteLine ("        public byte[] ToBytes ()");
            sw.WriteLine ("        {");
            sw.WriteLine ("            List<byte> byteList = new List<byte> ();");
            sw.WriteLine ("");
            sw.WriteLine ("            byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.Sync));");
            sw.WriteLine ("            byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.ByteCount));");
            sw.WriteLine ("            byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.MessageId));");
            sw.WriteLine ("            byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.SequenceNumber));");
        }

        static void CsCloseToBytesMethod (StreamWriter sw)
        {
            sw.WriteLine ("");
            sw.WriteLine ("            // append data bytes to header bytes");
            sw.WriteLine ("            byte[] msgBytes = new byte [byteList.Count];");
            sw.WriteLine ("            byteList.CopyTo (msgBytes, 0);");
            sw.WriteLine ("            return msgBytes;");
            sw.WriteLine ("        }");
        }
    }
}



