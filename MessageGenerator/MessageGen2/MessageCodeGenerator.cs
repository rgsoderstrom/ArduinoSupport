
//
// MessageCodeGenerator.cs - test driver for MessageGen classes
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

namespace MessageGenerator
{
    internal class MessageCodeGenerator
    {
        static void Main (string [] args)
        {
            string dir = @"C:\Users\rgsod\Documents\Visual Studio 2022\Projects\ArduinoSupport\MessageGenerator\AutoGeneratedFiles\";
            string messageNameSpace = "ArduinoInterface";
            string messageName = "StatusMessage";

            //
            // Message members in C++ syntax
            //
            List<string> members = new List<string> ()
            {
                "char name [MaxNameLength];",
                "byte DataReceived;",
                "byte DataReady;",
            };

            bool MakeCppFiles = false;
            bool MakeCsFiles = true;

            if (MakeCppFiles == true)
            {
                try
                {
                    string cppFile = dir + messageName + "_Auto.cpp";

                    using (StreamWriter sw = new StreamWriter (cppFile))
                    {
                        CppCommentAndIncludeFile (sw, messageName);

                        CppOpenConstructor (sw, messageName);
                        CppCpp_FromBytes cppCppFromBytes = new CppCpp_FromBytes (members);
                        foreach (string item in cppCppFromBytes.results)
                            sw.WriteLine (item);
                        CppCloseMethod (sw);

                        CppOpenToBytesMethod (sw, messageName);

                        CppCpp_ToBytes cppCppToBytes = new CppCpp_ToBytes (members);
                        foreach (string item in cppCppToBytes.results)
                            sw.WriteLine (item);
                        CppCloseMethod (sw);
                    }
                }

                catch (Exception ex)
                {
                    Console.WriteLine ("Exception generating C++ code: " + ex.Message);
                }
            }

            if (MakeCsFiles == true)
            {
                try
                {
                    string csFile = @dir + messageName + "_Auto.cs";

                    using (StreamWriter sw = new StreamWriter (csFile))
                    {
                        CsOpenNamespace (sw, messageNameSpace, messageName);
                        CsOpenClass (sw, messageName);
                        CsOpenConstructor (sw, messageName);
                        CppCs_FromBytes cppCsFromBytes = new CppCs_FromBytes (members);
                        foreach (string item in cppCsFromBytes.results)
                            sw.WriteLine (item);
                        CsCloseConstructor (sw);

                        CsOpenToBytesMethod (sw, messageName);
                        CppCs_ToBytes cppCsToBytes = new CppCs_ToBytes (members);
                        foreach (string item in cppCsToBytes.results)
                            sw.WriteLine (item);
                        CsCloseToBytesMethod (sw);
                        CsCloseClass (sw);
                        CsCloseNamespace (sw);
                    }
                }

                catch (Exception ex)
                {
                    Console.WriteLine ("Exception generating C# code: " + ex.Message);
                }
            }
        }

        //
        // Methods to write C++ file
        //
        static void CppCommentAndIncludeFile (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("//");
            sw.WriteLine ("// auto-generated code for message " + msgName);
            sw.WriteLine ("//");
            sw.WriteLine ("");
            sw.WriteLine ("#include <Arduino.h>");
            sw.WriteLine ("#include \"" + msgName + ".h\"");
            sw.WriteLine ("");
        }

        static void CppOpenConstructor (StreamWriter sw, string msgName)
        {
            sw.WriteLine (msgName + "::" + msgName + " (byte *msgBytes)");
            sw.WriteLine ("{");
            sw.WriteLine ("    memset (this, 0, sizeof (" + msgName + "));");
            sw.WriteLine ("");
            sw.WriteLine ("    header.Sync           = (msgBytes [1] << 8) | msgBytes [0];");
            sw.WriteLine ("    header.ByteCount      = (msgBytes [3] << 8) | msgBytes [2];");
            sw.WriteLine ("    header.MsgId          = (msgBytes [5] << 8) | msgBytes [4];");
            sw.WriteLine ("    header.SequenceNumber = (msgBytes [7] << 8) | msgBytes [6];");
            sw.WriteLine ("");
            sw.WriteLine ("    int get = 8;");
            sw.WriteLine ("");
        }

        static void CppOpenToBytesMethod (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("void " + msgName + "::ToBytes (byte *byteArray)");
            sw.WriteLine ("{");
            sw.WriteLine ("    int put = 0;");
            sw.WriteLine ("    byteArray [put++] = header.Sync;");
            sw.WriteLine ("    byteArray [put++] = header.Sync >> 8;");
            sw.WriteLine ("    byteArray [put++] = header.ByteCount;");
            sw.WriteLine ("    byteArray [put++] = header.ByteCount >> 8;");
            sw.WriteLine ("    byteArray [put++] = header.MsgId;");
            sw.WriteLine ("    byteArray [put++] = header.MsgId >> 8;");
            sw.WriteLine ("    byteArray [put++] = header.SequenceNumber;");
            sw.WriteLine ("    byteArray [put++] = header.SequenceNumber >> 8;");
            sw.WriteLine ("");
        }

        static void CppCloseMethod (StreamWriter sw)
        {
            sw.WriteLine ("}");
            sw.WriteLine ("");
        }

        //
        // Methods to write C# file
        //
        static void CsOpenNamespace (StreamWriter sw, string namespaceName, string msgName)
        {
            sw.WriteLine ("//");
            sw.WriteLine ("// auto-generated code for message " + msgName);
            sw.WriteLine ("//");
            sw.WriteLine ("");
            sw.WriteLine ("using System;");
            sw.WriteLine ("using System.Text;");
            sw.WriteLine ("using System.Collections.Generic;");
            sw.WriteLine ("using SocketLib;");
            sw.WriteLine ("");

            sw.WriteLine ("namespace " + namespaceName);
            sw.WriteLine ("{");
        }

        static void CsCloseNamespace (StreamWriter sw)
        {
            sw.WriteLine ("}");
        }

        static void CsOpenClass (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("    public partial class " + msgName);
            sw.WriteLine ("    {");
        }

        static void CsCloseClass (StreamWriter sw)
        {
            sw.WriteLine ("    }");
        }

        static void CsOpenConstructor (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("        public " + msgName + " (byte [] fromBytes)");
            sw.WriteLine ("        {");
            sw.WriteLine ("             header = new Header ();");
            sw.WriteLine ("             data = new Data ();");
            sw.WriteLine ("             int byteIndex = 0;");
            sw.WriteLine ("");
            sw.WriteLine ("             header.Sync           = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
            sw.WriteLine ("             header.ByteCount      = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
            sw.WriteLine ("             header.MessageId      = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
            sw.WriteLine ("             header.SequenceNumber = BitConverter.ToUInt16 (fromBytes, byteIndex); byteIndex += 2;");
            sw.WriteLine ("");
        }

        static void CsCloseConstructor (StreamWriter sw)
        {
            sw.WriteLine ("        }");
            sw.WriteLine ("");
        }

        static void CsOpenToBytesMethod (StreamWriter sw, string msgName)
        {
            sw.WriteLine ("        public byte[] ToBytes ()");
            sw.WriteLine ("        {");
            sw.WriteLine ("             List<byte> byteList = new List<byte> ();");
            sw.WriteLine ("");
            sw.WriteLine ("             byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.Sync));");
            sw.WriteLine ("             byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.ByteCount));");
            sw.WriteLine ("             byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.MessageId));");
            sw.WriteLine ("             byteList.InsertRange (byteList.Count, BitConverter.GetBytes (header.SequenceNumber));");
            sw.WriteLine ("");
        }

        static void CsCloseToBytesMethod (StreamWriter sw)
        {
            sw.WriteLine ("            // append data bytes to header bytes");
            sw.WriteLine ("            byte[] msgBytes = new byte [byteList.Count];");
            sw.WriteLine ("            byteList.CopyTo (msgBytes, 0);");
            sw.WriteLine ("            return msgBytes;");
            sw.WriteLine ("        }");
            //sw.WriteLine ("");
        }
    }
}



