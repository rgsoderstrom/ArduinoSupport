
//
// MessageCodeGenerator.cs - 
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

namespace MessageGenerator
{
    public partial class MessageCodeGenerator
    {
        static void Main (string [] args)
        {
            // put generated files here
            string cppFileDir = @"C:\Users\rgsod\Documents\Visual Studio 2022\Projects\ArduinoSupport\MessageGenerator\AutoGeneratedFiles\";
            string csFileDir  = @"C:\Users\rgsod\Documents\Visual Studio 2022\Projects\ArduinoSupport\MessageGenerator\MessageGenTest2\";

            //string cppFileDir = @"C:\Users\rgsod\Documents\Visual Studio 2022\Projects\ArduinoSupport\MessageGenerator\AutoGeneratedFiles\";
            //string csFileDir = @"C:\Users\rgsod\Documents\Visual Studio 2022\Projects\ArduinoSupport\MessageGenerator\AutoGeneratedFiles\";

            //**********************************************************************************************
            //**********************************************************************************************
            //**********************************************************************************************

            //
            // Describe the message
            //
            string messageNameSpace = "ArduinoInterface"; // only used for C# files
            string messageName = "LoopbackDataMsg_Auto";

            //
            // Data section pseudo code
            //

            // Constants
            List<string> Constants = new List<string> ()
            {
                //"char abc = 7;",
                //"char def = 'q'",
                //"int CCC = 5",
                //"int N = 3",
                "unsigned int MaxCount = 12",
                //"double NN = 3.14159"
            };

            // Variables
            List<string> Variables = new List<string> ()
            {
                //  "byte  source;",
                //  "byte  dataWordCount;",
                  "int   dataWords [Data.MaxCount];",
                //"char aaa",
                //"short ppp;",
                //"unsigned char bbbb [Data.CCC];",
                //"int LoopBackData [Data.WordCount];",
                //"int ddd;",
                //"float dddd [Data.N];"
            };

            //**********************************************************************************************
            //**********************************************************************************************
            //**********************************************************************************************

            // what to make this run
            bool MakeCppFiles = true;
            bool MakeCsFile = true;

            //*****************************************************************

            // parse 

            List<string []> variablesAsTokens = new List<string[]> ();
            List<string []> constantsAsTokens = new List<string[]> ();

            try
            {
                variablesAsTokens = ParseVariables (Variables);
                constantsAsTokens = ParseConstants (Constants);
            }

            catch (Exception ex)
            {
                Console.WriteLine ("Exception parsing: " + ex.Message);
            }

            // debug flag to write tokens to console
            bool verbose = false;

            if (verbose)
            {
                // constants
                Console.WriteLine ("Constants:");
                foreach (string [] strArray in constantsAsTokens)
                {
                    foreach (string str in strArray)
                        Console.Write (str + ", ");
                    Console.WriteLine ();
                }

                // variables
                Console.WriteLine ("\nVariables:");
                foreach (string [] strArray2 in variablesAsTokens)
                {
                    foreach (string str in strArray2)
                        Console.Write (str + ", ");
                    Console.WriteLine ();
                }
            }

            //******************************************************************

            if (MakeCppFiles == true)
            {
                string cppFile = cppFileDir + messageName + ".cpp";
                string hFile = cppFileDir + messageName + ".h";

                try
                {
                    using (StreamWriter sw = new StreamWriter (hFile))
                    {
                        Cpp_Include include = new Cpp_Include (sw, messageName, constantsAsTokens, variablesAsTokens);
                    }

                    using (StreamWriter sw = new StreamWriter (cppFile))
                    {
                        Cpp_Code code = new Cpp_Code (sw, messageName, variablesAsTokens);
                    }
                }

                catch (Exception ex)
                {
                    Console.WriteLine ("Exception generating C++ file: " + ex.Message);
                }
            }

            if (MakeCsFile == true)
            {
                string formatFileName  = csFileDir + messageName + "_Format.cs";
                string methodsFileName = csFileDir + messageName + "_Methods.cs";

                try
                {
                    using (StreamWriter sw = new StreamWriter (formatFileName))
                    {
                        Cs_FormatFile f1 = new Cs_FormatFile (sw, messageNameSpace, messageName, constantsAsTokens, variablesAsTokens);
                    }

                    using (StreamWriter sw = new StreamWriter (methodsFileName))
                    {
                        Cs_MethodsFile f1 = new Cs_MethodsFile (sw, messageNameSpace, messageName, variablesAsTokens);
                    }
                }

                catch (Exception ex)
                {
                    Console.WriteLine ("Exception generating C# code: " + ex.Message);
                }
            }
        }
    }
}



